/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

/* Corne-ish Zen key positions
  ╭────────────────────────╮ ╭────────────────────────╮
  │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
              ╰────────────╯ ╰────────────╯            */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "zmk-helpers/helper.h"

#undef CONFIG_ZMK_MACRO_DEFAULT_WAIT_MS
#define CONFIG_ZMK_MACRO_DEFAULT_WAIT_MS 30

#undef CONFIG_ZMK_MACRO_DEFAULT_TAP_MS
#define CONFIG_ZMK_MACRO_DEFAULT_TAP_MS 40

#define QWERTY 0
#define NUM    1
#define CODE   2
#define FN     3

// First define the acute accent macro (similar to how AIGU is defined in the file)
ZMK_MACRO_ONE_PARAM(ACUTE, bindings =
    <&kp RA(E)>,                    // First press AltGr+E for the acute accent
    <&macro_param_1to1>,            // Then press the parameter (E or Shift+E)
    <&macro_tap &kp MACRO_PLACEHOLDER>;
)

// Then create a mod-morph that will output é or É depending on Shift
ZMK_MOD_MORPH(morph_e_acute, 
    bindings = <&ACUTE E>, <&ACUTE LS(E)>;  // Without/with Shift
    mods = <(MOD_LSFT|MOD_RSFT)>;          // Trigger on either Shift key
)

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
  combos {
      compatible = "zmk,combos";
      combo._esc {
          timeout-ms = <60>;
          key-positions = <0 1>;
          layers = <0 1 2>;
          bindings = <&kp ESC>;
      };
      combo_scrnsht_all {
          timeout-ms = <150>;
          key-positions = <3 24 37>;
          bindings = <&kp LS(RG(N3))>;
      };
      combo_scrnsht_area {
          timeout-ms = <150>;
          key-positions = <4 24 37>;
          bindings = <&kp LS(RG(N4))>;
      };
      combo_scrnsht_window {
          timeout-ms = <150>;
          key-positions = <5 24 37>;
          bindings = <&kp LS(RG(N5))>;
      };
      combo_caps_lock {
          timeout-ms = <60>;
          key-positions = <12 13 14>;
          layers = <0 1 2>;
          bindings = <&kp CAPS>;
      };
      combo_combo_del {
          timeout-ms = <60>;
          key-positions = <11 40>;
          bindings = <&kp LG(BSPC)>;
      };
  };
};

/ {

        behaviors {
            gratab: grave_tab {
                compatible = "zmk,behavior-mod-morph";
                label = "GRAVE_TAB";
                #binding-cells = <0>;
                bindings = <&kp TAB>, <&kp GRAVE>;
                mods = <(MOD_RALT|MOD_LALT)>;
            };
            // grav_a: grave_a {
            //     compatible = "zmk,behavior-mod-morph";
            //     label = "GRAVE_A";
            //     #binding-cells = <0>;
            //     bindings = <&kp A>, <&grave_a_macro>;
            //     mods = <MOD_RALT>;
            // };
            // acu_E: acute_e {
            //     compatible = "zmk,behavior-mod-morph";
            //     label = "ACUTE_E";
            //     #binding-cells = <0>;
            //     bindings = <&kp E>, <&acute_e_macro>;
            //     mods = <MOD_RALT>;
            // };
        };

        // TODO check https://github.com/JeffDess/zmk-config/blob/accents-no-unicode/layouts/canadian-multilingual-standard.dtsi
        // macros {
        //     grave_a_macro: grave_a_macro {
        //         compatible = "zmk,behavior-macro";
        //         label = "GRAVE_A_MACRO";
        //         #binding-cells = <0>;
        //         bindings = <&kp RA(GRAVE) &kp A>;
        //     };
        //     acute_e_macro: acute_e_macro {
        //         compatible = "zmk,behavior-macro";
        //         label = "ACUTE_E_MACRO";
        //         #binding-cells = <0>;
        //         bindings = <&kp RA(E) &kp E>;
        //     };
        // };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";

// --------------------------------------------------------------------------------------
// | TAB ⌥ (`) |  Q  |  W  |  E  |  R  |  T    |      |  Y  |  U   |  I    |  O  |  P  | BKSP  |
// |   CTRL    |  A  |  S  |  D  |  F  |  G    |      |  H  |  J   |  K    |  L  |  ;  |  '    |
// |   SHFT    |  Z  |  X  |  C  |  V  |  B    |      |  N  |  M   |  ,    |  .  |  /  | SHFT  |
//                         |  ⌥  |  ⌘  | SPC 2 |      | RET | NUM  | ESC ⌥ |

                        bindings = <
   &gratab    &kp Q  &kp W &morph_e_acute &kp R &kp T      &kp Y &kp U  &kp I     &kp O   &kp P     &kp BSPC
   &kp LCTRL  &kp A  &kp S &kp D  &kp F &kp G      &kp H &kp J  &kp K     &kp L   &kp SEMI  &kp SQT
   &kp LSHFT  &kp Z  &kp X &kp C  &kp V &kp B      &kp N &kp M  &kp COMMA &kp DOT &kp FSLH  &kp RSHFT
              &kp LALT &kp LGUI  &lt CODE SPACE   &kp RET &mo NUM &mt RALT ESC
                        >;
                };

                num_layer {
                        label = "NUM";

// ----------------------------------------------------------------------------------
// | TAB  |  1   |  2     |    3     |  4  |  5  |      |  6  |  7   |  8    |  9  |  0  | BKSP |
// | CTRL |  |<  |  ▶II   |    >|    | V↓  | V↑  |      | LFT | DWN  |  UP   | RGT | HOM |      |
// | SHFT | S FN |        | T QWERTY | ☀️ ↓ | ☀️ ↑ |      | ▶II | VM   |  ,    |  .  | END | SHFT |
//                        |  ⌥       |  ⌘  | SPC |      | RET | NUM  | ESC ⌥ |

                        bindings = <
   &trans  &kp N1     &kp N2    &kp N3      &kp N4        &kp N5           &kp N6         &kp N7     &kp N8  &kp N9    &kp N0   &trans
   &trans  &kp C_PREV &kp C_PP  &kp C_FF    &kp C_VOL_DN  &kp C_VOL_UP     &kp LEFT       &kp DOWN   &kp UP  &kp RIGHT &kp HOME &none
   &trans  &sl FN     &none     &tog QWERTY &kp C_BRI_DN  &kp C_BRI_UP     &mt C_FF C_PP  &kp C_MUTE &trans  &trans    &kp END  &trans
                                &trans      &trans        &kp SPACE        &trans         &trans     &trans
                        >;
                };

                code_layer {
                        label = "CODE";

// ----------------------------------------------------------------------------------
// |  `   |  !  |  @  |  #  |  $  |  %    |      |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |       |      |  -  |  =  |  [  |  ]  |  \  |  "|" |
// | SHFT |     |     |     |     |       |      |  _  |  +  |  {  |  }  |  /  |  ~   |
//                    |  ⌥  |  ⌘  | SPC 2 |      | RET |  ⌘  | ESC ⌥ |

                        bindings = <
   &kp GRAVE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &trans
   &trans    &none    &none  &none    &none    &none       &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp PIPE
   &trans    &none    &none  &none    &none    &none       &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp FSLH &kp TILDE
                             &trans   &trans   &trans      &trans    &kp RGUI   &trans
                        >;
                };

                function_layer {
                        label = "FN";

// ---------------------------------------------------------------------------------
// | TAB  | F1   | F2     | F3       | F4  | F5    |      | F6  | F7  | F8  | F9  | F10   |  F11  |
// | CTRL | BT1  | BT2    | BT3      | BT4 | BT5   |      |     |     |     |     |       |  F12  |
// | SHFT | T FN |        | T QWERTY |     |       |      |     |     |     |     | BTCLR |  SHFT |
//                        |    ⌥     |  ⌘  | SPC 2 |      | RET |  ⌘  |  ⌥  |

                        bindings = <
   &trans &kp F1       &kp F2       &kp F3       &kp F4       &kp F5           &kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &kp F11
   &trans &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &none    &none    &none   &none   &none      &kp F12
   &trans &tog FN      &none        &tog QWERTY  &none        &none            &none    &none    &none   &none   &bt BT_CLR &trans
                                    &trans       &trans       &trans           &trans   &trans   &trans
                        >;
                };

// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
// NOTE: reset layer's only purpose is to have &reset somewhere on the keymap, otherwise &lt or &mt won't work.
// NOTE: this issue is documented in LowPro Discord chatter rather than on GitHub.
// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
                unused_reset_layer {
                        label = "RESET";
                        bindings = <
   &reset &none &none &none  &none  &none     &none  &none  &none &none &none &trans
   &trans &none &none &none  &none  &none     &none  &none  &none &none &none &trans
   &trans &none &none &none  &none  &none     &none  &none  &none &none &none &trans
                      &trans &trans &trans    &trans &trans &trans
                        >;
                };
        };
};
